---
layout: post
title: "001.shared_ptr 그리고 exit()"
date: 2021-05-06T13:48:58Z
categories: ["Another Bug"]
---

# 서문
때는 OpenGL 및 Shader를 공부하고 있을 때였다. Shader를 작성하고 결과를 보기 위해 실행했는데 이전에 만들어 두었던 실행 코드에서 Shader가 빌드 실패를 하고 자동으로 Except 되었다. 문제는 단순하기 exception이 throw가 되는 게 아니고 함수 내부에서 ```exit()```를 통해 프로그램이 종료되도록 만들어둔 것이다.

{% highlight cpp %}
EXCEPT(InternalErrorException, Shader, "Shader 빌드 실패")
{% endhighlight %}

사실 이렇게만 보면 큰 문제는 아닌 것 같다. 하지만 기존 코드에서 메모리 관리를 위해 shared_ptr를 사용하였고. exit를 통해서 프로그램이 종료되는 와중에 shared_ptr로 할당된 메모리가 해제될 때 문제가 발생하였다.

작성했던 Shader는 Texture를 그리는 Shader였다. 그릴 Texture는 Texture 클래스를 통해 메모리상에 올라와 있는 상태였고 OpenGL로 Texture가 바인드된 상태였다. 문제는 이 클래스의 파괴자가 실행될 때였다.

# 문제
Texture 클래스의 파괴자는 바인드 되었던 핸들을 해제하고 gl texture를 삭제한다. 그 후 OpenGL 상에서 오류가 없는지 확인하는데 이 과정에서 ```glGetError()```가 잘못된 메모리 참조 오류를 내며 crash를 띄운 것이다.

해당 함수는 glad 라이브러리를 통해서 처음 glad를 초기화 할 때 메모리상에서 함수 포인터를 타입으로 가지고 있는 전역변수로 설정되고 그 변수를 통해 실행되는 함수로 확인됐다.

결국 ```exit()```를 호출하여 프로그램이 종료되는 와중에 해당 전역변수가 메모리상에서 정리된 후 Texture가 정리되면서 생긴 문제였다.

# 고민
처음에는 단순하게 ```exit()``` 함수가 실행되면서 정리되기 시작하기 전에 선언한 메모리들을 정리하는 방법에 대해 생각했었다. 하지만 해당 방법을 사용하려면 지금까지 사용했던 메모리 관리 방법을 버리고 새로 구축해야 한다는 단점이 있었다. shared_ptr을 사용한 이유가 프로그램 내부에서 따로 메모리를 관리하지 않으려는 이유도 있었기 때문에 다른 방법을 생각했다.

두 번째로 생각했던 것은 프로그램을 종료하는 방법이었다. Application 클래스를 통해서 프로그램이 작동했으므로 Application 내부의 Loop을 돌지 않게 하면 자연스럽게 프로그램이 종료되고 종료되는 와중에 전역변수보다 Texture 클래스들이 먼저 정리되리라 생각했다.

하지만 이 방법도 문제가 있었는데 EXCEPT는 보통 내부에서 프로그램이 더는 정상적으로 구동되지 않을 때 호출된다는 점이었다. EXCEPT가 호출될 상황이면 Application이 정상적으로 종료되지 않고 다른 EXCEPT가 발생할 수도 있다는 이야기였다.

# 해결
결국 2가지 방법을 섞기로 했다. 정상적으로 종료되는 상황에서는 Application에 종료를 요청하고 아닌 상황에서는 강제적으로 프로그램을 종료하기로 했다.

{% highlight cpp %}
void terminate(bool force) {
    if (!force) {
        /**
         * Application을 직접적으로 호출하기보다는 해당 함수로 현재 실행 중인 창을 종료하여
         * 간접적으로 현재 실행 중인 Application을 종료하도록 한다
         */
        PostQuitMessage(0); 
    } else {
        std::terminate(); // 내부적으로 abort()를 호출한다
    }
}
{% endhighlight %}

# 참조

## ```exit()``` 와 ```std::terminate()``` 혹은 ```abort()``` (이하 ```abort()```)와의 차이점
```exit()```은 함수가 기본적으로 프로그램이 정상적으로 종료되었음을 확인하고 프로그램이 종료시킨다. 즉 런타임에서 종료를 처리한다.

하지만 ```abort()``` 함수는 프로그램이 비정상적으로 종료되었음을 가정하고 프로그램을 강제 종료시킨다. 즉 초기화된 전역, static 개체에 대한 일반적인 삭제 과정을 무시한다.